<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端面试题</title>
    <link href="/reading.github.io/2022/01/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/reading.github.io/2022/01/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>工作需要，整理了一些前端面试题。大多数都是一些很常用、很基础的问题。随着经验的增长，以后我会不断完善。</p><h2 id="html-css"><a href="#html-css" class="headerlink" title="html/css"></a>html/css</h2><h3 id="1-会使用flex布局吗？-请使用flex实现垂直居中"><a href="#1-会使用flex布局吗？-请使用flex实现垂直居中" class="headerlink" title="1. 会使用flex布局吗？ 请使用flex实现垂直居中"></a>1. 会使用flex布局吗？ 请使用flex实现垂直居中</h3><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs css">&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-flex-grow-属性的用途？"><a href="#2-flex-grow-属性的用途？" class="headerlink" title="2. flex-grow 属性的用途？"></a>2. flex-grow 属性的用途？</h3><p>该属性规定了在flex容器中分配剩余空间的相对比例</p><h3 id="3-会使用Grid布局吗？-Grid布局和flex布局有什么区别？"><a href="#3-会使用Grid布局吗？-Grid布局和flex布局有什么区别？" class="headerlink" title="3. 会使用Grid布局吗？ Grid布局和flex布局有什么区别？"></a>3. 会使用Grid布局吗？ Grid布局和flex布局有什么区别？</h3><p>Flexbox 是一种一维布局。一行或者一列。Grid 是一种二维布局。多行和多列。</p><h3 id="4-如何让使用css定义元素的宽高比？"><a href="#4-如何让使用css定义元素的宽高比？" class="headerlink" title="4. 如何让使用css定义元素的宽高比？"></a>4. 如何让使用css定义元素的宽高比？</h3><p>padding-top: 100%  或  aspect-ratop</p><h3 id="5-是否做过响应式布局？"><a href="#5-是否做过响应式布局？" class="headerlink" title="5. 是否做过响应式布局？"></a>5. 是否做过响应式布局？</h3><br /><h2 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h2><h3 id="1-请介绍一下arr-map方法"><a href="#1-请介绍一下arr-map方法" class="headerlink" title="1. 请介绍一下arr.map方法"></a>1. 请介绍一下arr.map方法</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">arr.map(<span class="hljs-keyword">item</span> =&gt; <span class="hljs-keyword">item</span>.<span class="hljs-built_in">length</span>)<br></code></pre></td></tr></table></figure><p><code>map方法</code> 对数组的每个元素都调用函数，并返回结果数组</p><br /><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="1-vue2-和-vue3-的区别？"><a href="#1-vue2-和-vue3-的区别？" class="headerlink" title="1. vue2 和 vue3 的区别？"></a>1. vue2 和 vue3 的区别？</h3><h4 id="1-响应式原理的改变"><a href="#1-响应式原理的改变" class="headerlink" title="1) 响应式原理的改变"></a>1) 响应式原理的改变</h4><p>Vue2响应式原理采用的是<code>defineProperty</code>，而vue3选用的是<code>proxy</code>。这两者前者是修改对象属性的权限标签，后者是代理整个对象。性能上proxy会更加优秀。</p><h4 id="2-diff算法，渲染算法的改变"><a href="#2-diff算法，渲染算法的改变" class="headerlink" title="2) diff算法，渲染算法的改变"></a>2) diff算法，渲染算法的改变</h4><p>Vue3优化diff算法。不再像vue2那样比对所有dom，而采用了<code>block tree</code>的做法。此外重新渲染的算法里也做了改进，利用了闭包来进行缓存。这使得vue3的速度比vue2快了6倍。</p><h4 id="3-组合式API"><a href="#3-组合式API" class="headerlink" title="3) 组合式API"></a>3) 组合式API</h4><p>vue3使用<code>组合式Api（Composition API）</code>，相比于vue2<code>选项类型API（Options API）</code>更加简洁，更加符合代码逻辑。</p><h3 id="2-v-for-和-v-if-的优先级"><a href="#2-v-for-和-v-if-的优先级" class="headerlink" title="2. v-for 和 v-if 的优先级"></a>2. v-for 和 v-if 的优先级</h3><p>在vue2中，v-for &gt; v-if<br>在vue3中，v-if &gt; v-for</p><h3 id="3-key值的作用"><a href="#3-key值的作用" class="headerlink" title="3. key值的作用"></a>3. key值的作用</h3><p>key的作用主要是为了高效的更新虚拟DOM，vue在patch的过程中通过key值判断两个节点是否是同一个，从而减少Dom操作量</p><h3 id="4-自己开发过-封装过哪些组件？"><a href="#4-自己开发过-封装过哪些组件？" class="headerlink" title="4. 自己开发过/封装过哪些组件？"></a>4. 自己开发过/封装过哪些组件？</h3><h3 id="5-是否会使用uniapp开发App？"><a href="#5-是否会使用uniapp开发App？" class="headerlink" title="5. 是否会使用uniapp开发App？"></a>5. 是否会使用uniapp开发App？</h3><h3 id="6-是否了解vue-ssr？"><a href="#6-是否了解vue-ssr？" class="headerlink" title="6. 是否了解vue ssr？"></a>6. 是否了解vue ssr？</h3><p>CSR全称是 <code>Client Side Rendering</code> ，代表的是客户端渲染。顾名思义，就是在渲染工作在客户端（浏览器）进行，而不是在服务器端进行。举个例子，我们平时用vue，react等框架开发的项目，都是先下载html文档（不是最终的完全的html），然后下载js来执行渲染出页面结果。</p><p>SSR全称是 <code>Server Side Rendering</code>，代表的是服务端渲染。与客户端渲染不同的是，SSR输出的是一个渲染完成的html，整个渲染过程是在服务器端进行的。例如传统的JSP，PHP都是服务端渲染。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
      <tag>html</tag>
      
      <tag>javaScript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Vue 3 和 Vite 项目中安装并配置 Tailwind CSS</title>
    <link href="/reading.github.io/2022/01/24/%E5%9C%A8%20Vue%203%20%E5%92%8C%20Vite%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE%20Tailwind%20CSS/"/>
    <url>/reading.github.io/2022/01/24/%E5%9C%A8%20Vue%203%20%E5%92%8C%20Vite%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE%20Tailwind%20CSS/</url>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="1-初始化vite项目"><a href="#1-初始化vite项目" class="headerlink" title="1. 初始化vite项目"></a>1. 初始化vite项目</h3><br /><p>首先，我们要初始化一个vite项目，npm init vite + 项目名称</p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">npm init vite <span class="hljs-keyword">my</span>-project<br></code></pre></td></tr></table></figure><br /><p>接下来，我们看到几个vite选项，如下：</p><p><img src="vite-init-a.png" alt="首先选择一个框架， 这里我们直接选择 vue"></p><p><img src="vite-init-b.png" alt="这里是确定项目中是否使用TypeScript。我们这里暂时先选择第一个，不使用TypeScript"></p><p><img src="vite-init-c.png" alt="完成！"></p><p>我们接着按照提示操作</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">cd my-<span class="hljs-keyword">project</span><br>npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>至此， 我们已经成功初始化并安装了一个vue3 + vite项目</p><br /><h3 id="2-安装-Tailwind-CSS"><a href="#2-安装-Tailwind-CSS" class="headerlink" title="2. 安装 Tailwind CSS"></a>2. 安装 Tailwind CSS</h3><p>通过 npm安装tailwindcss及其对等依赖项，然后运行 ​​init 命令生成<code>tailwind.config.js</code>和<code>postcss.config.js.</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">npm install -D tailwindcss postcss <span class="hljs-built_in">auto</span>prefixer<br>npx tailwindcss init -p<br></code></pre></td></tr></table></figure><br /><h3 id="3-配置模板路径"><a href="#3-配置模板路径" class="headerlink" title="3. 配置模板路径"></a>3. 配置模板路径</h3><p>打开<code>tailwind.config.js</code>文件，在文件中添加所有模板文件的路径</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts">module.exports = &#123;<br><span class="hljs-symbol">  content:</span> [<br>    <span class="hljs-string">&quot;./index.html&quot;</span>,<br>    <span class="hljs-string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>,<br>  ],<br><span class="hljs-symbol">  theme:</span> &#123;<br><span class="hljs-symbol">    extend:</span> &#123;&#125;,<br>  &#125;,<br><span class="hljs-symbol">  plugins:</span> [],<br>&#125;<br></code></pre></td></tr></table></figure><br /><h3 id="3-将-Tailwind-指令添加到-CSS"><a href="#3-将-Tailwind-指令添加到-CSS" class="headerlink" title="3. 将 Tailwind 指令添加到 CSS"></a>3. 将 Tailwind 指令添加到 CSS</h3><p>在<code>src</code>文件夹中创建一个<code>index.css</code>文件并<code>@tailwind</code>为 Tailwind 的每个层添加指令。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/* /src/index.css */</span><br><span class="hljs-variable">@tailwind</span> base;<br><span class="hljs-variable">@tailwind</span> components;<br><span class="hljs-variable">@tailwind</span> utilities;<br></code></pre></td></tr></table></figure><br /><h3 id="4-导入-CSS-文件"><a href="#4-导入-CSS-文件" class="headerlink" title="4. 导入 CSS 文件"></a>4. 导入 CSS 文件</h3><p>在 <code>main.js</code> 文件中导入 <code>./src/index.css</code> </p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./index.css&#x27;</span><br><br>createApp(App).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-运行"><a href="#5-运行" class="headerlink" title="5. 运行"></a>5. 运行</h3><p>运行 <code>npm run dev</code> </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">run</span> dev<br></code></pre></td></tr></table></figure><p><img src="localhost-3000.png" alt="看到这个提示后，打开 http://localhost:3000/"></p><p><img src="run-dev.png" alt="看到这个页面，就成功了"></p></br ><h3 id="6-调试"><a href="#6-调试" class="headerlink" title="6. 调试"></a>6. 调试</h3><p>在vscode的扩展商店搜索 <code>tailwind</code> 安装 <code>tailwind CSS IntelliSense</code> 智能提示插件</p><p><img src="install-plugin.png"></p><p>我们在 <code>App.vue</code> 使用一下看看效果吧</p><p><img src="plugin.png" alt="安装插件后可以看到tailwind语法提示，极大提高开发效率"></p><p>我们可以随便设置个样式， 看看效果吧</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;text-5xl text-red-400 font-bold&quot;</span>&gt;<br>  我成功了！！！！<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="success.png"></p></br ><h4 id="恭喜您已经完成了所有步骤！！"><a href="#恭喜您已经完成了所有步骤！！" class="headerlink" title="恭喜您已经完成了所有步骤！！"></a>恭喜您已经完成了所有步骤！！</h4></br>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
      <tag>tailwind css</tag>
      
      <tag>vue3</tag>
      
      <tag>vite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/reading.github.io/2022/01/21/hello-world/"/>
    <url>/reading.github.io/2022/01/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
